name: CI/CD Pipeline - Build & Deploy

on:
  workflow_dispatch:  # Disabled - kept for reference only; use ci-cd-single-repo.yml instead
  
  # Disabled to consolidate into ci-cd-single-repo.yml
  # push:
  #   branches:
  #     - main
  #     - develop
  # pull_request:
  #   branches:
  #     - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code (Repo A)
        uses: actions/checkout@v4
        with:
          path: source_code

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: source_code/demo
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: source_code/demo
        run: ./gradlew build -x test

      - name: Run tests
        working-directory: source_code/demo
        run: ./gradlew test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: source_code/demo/build/test-results/

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            latest

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: source_code/demo
          file: source_code/demo/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Save image tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "IMAGE_TAG=ghcr.io/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_ENV
          echo "${{ github.sha }}" > /tmp/image_tag.txt

      - name: Upload image tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: /tmp/image_tag.txt

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download image tag
        uses: actions/download-artifact@v4
        with:
          name: image-tag

      - name: Checkout GitOps repository (Repo B)
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.GITOPS_REPO_URL }}
          token: ${{ secrets.GITOPS_REPO_TOKEN }}
          path: gitops_repo

      - name: Get commit SHA
        id: vars
        run: echo "IMAGE_TAG=main-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Update Kubernetes manifest with new image tag
        working-directory: gitops_repo
        run: |
          IMAGE_TAG="${{ steps.vars.outputs.IMAGE_TAG }}"
          NEW_IMAGE="ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
          
          echo "Updating image to: $NEW_IMAGE"
          
          # Update k8s-deployment.yaml with new image tag
          sed -i "s|image: ghcr.io/${{ github.repository }}:.*|image: $NEW_IMAGE|g" k8s-deployment.yaml
          
          # Verify the change
          grep "image:" k8s-deployment.yaml

      - name: Commit and push to GitOps repository
        working-directory: gitops_repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add k8s-deployment.yaml
            git commit -m "CI: Update image tag to ${{ github.sha }} from ${{ github.repository }}"
            git push
          fi

      - name: Verify GitOps repo update
        working-directory: gitops_repo
        run: |
          echo "GitOps repository updated successfully"
          echo "New deployment manifest:"
          cat k8s-deployment.yaml

  notify:
    needs: [build, deploy]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Slack notification - Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: '✅ CI/CD Pipeline Completed Successfully',
              attachments: [{
                color: 'good',
                text: `Repository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Slack notification - Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: '❌ CI/CD Pipeline Failed',
              attachments: [{
                color: 'danger',
                text: `Repository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
